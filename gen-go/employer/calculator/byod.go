// Autogenerated by Thrift Compiler (0.12.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package calculator

import (
	"bytes"
	"context"
	"reflect"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = context.Background
var _ = reflect.DeepEqual
var _ = bytes.Equal

// Attributes:
//  - FirstName
//  - LastName
//  - RawIncome
//  - Position
//  - YearsInTheCompany
//  - FamilySize
type Employee struct {
  FirstName string `thrift:"FirstName,1,required" db:"FirstName" json:"FirstName"`
  LastName string `thrift:"LastName,2,required" db:"LastName" json:"LastName"`
  RawIncome float64 `thrift:"RawIncome,3,required" db:"RawIncome" json:"RawIncome"`
  // unused field # 4
  Position string `thrift:"Position,5,required" db:"Position" json:"Position"`
  YearsInTheCompany int32 `thrift:"YearsInTheCompany,6,required" db:"YearsInTheCompany" json:"YearsInTheCompany"`
  FamilySize int32 `thrift:"FamilySize,7,required" db:"FamilySize" json:"FamilySize"`
}

func NewEmployee() *Employee {
  return &Employee{}
}


func (p *Employee) GetFirstName() string {
  return p.FirstName
}

func (p *Employee) GetLastName() string {
  return p.LastName
}

func (p *Employee) GetRawIncome() float64 {
  return p.RawIncome
}

func (p *Employee) GetPosition() string {
  return p.Position
}

func (p *Employee) GetYearsInTheCompany() int32 {
  return p.YearsInTheCompany
}

func (p *Employee) GetFamilySize() int32 {
  return p.FamilySize
}
func (p *Employee) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetFirstName bool = false;
  var issetLastName bool = false;
  var issetRawIncome bool = false;
  var issetPosition bool = false;
  var issetYearsInTheCompany bool = false;
  var issetFamilySize bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
        issetFirstName = true
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
        issetLastName = true
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.DOUBLE {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
        issetRawIncome = true
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
        issetPosition = true
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
        issetYearsInTheCompany = true
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField7(iprot); err != nil {
          return err
        }
        issetFamilySize = true
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetFirstName{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field FirstName is not set"));
  }
  if !issetLastName{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field LastName is not set"));
  }
  if !issetRawIncome{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field RawIncome is not set"));
  }
  if !issetPosition{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Position is not set"));
  }
  if !issetYearsInTheCompany{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field YearsInTheCompany is not set"));
  }
  if !issetFamilySize{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field FamilySize is not set"));
  }
  return nil
}

func (p *Employee)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.FirstName = v
}
  return nil
}

func (p *Employee)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.LastName = v
}
  return nil
}

func (p *Employee)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.RawIncome = v
}
  return nil
}

func (p *Employee)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.Position = v
}
  return nil
}

func (p *Employee)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.YearsInTheCompany = v
}
  return nil
}

func (p *Employee)  ReadField7(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.FamilySize = v
}
  return nil
}

func (p *Employee) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("Employee"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Employee) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("FirstName", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:FirstName: ", p), err) }
  if err := oprot.WriteString(string(p.FirstName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.FirstName (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:FirstName: ", p), err) }
  return err
}

func (p *Employee) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("LastName", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:LastName: ", p), err) }
  if err := oprot.WriteString(string(p.LastName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.LastName (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:LastName: ", p), err) }
  return err
}

func (p *Employee) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("RawIncome", thrift.DOUBLE, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:RawIncome: ", p), err) }
  if err := oprot.WriteDouble(float64(p.RawIncome)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.RawIncome (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:RawIncome: ", p), err) }
  return err
}

func (p *Employee) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("Position", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:Position: ", p), err) }
  if err := oprot.WriteString(string(p.Position)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.Position (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:Position: ", p), err) }
  return err
}

func (p *Employee) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("YearsInTheCompany", thrift.I32, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:YearsInTheCompany: ", p), err) }
  if err := oprot.WriteI32(int32(p.YearsInTheCompany)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.YearsInTheCompany (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:YearsInTheCompany: ", p), err) }
  return err
}

func (p *Employee) writeField7(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("FamilySize", thrift.I32, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:FamilySize: ", p), err) }
  if err := oprot.WriteI32(int32(p.FamilySize)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.FamilySize (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:FamilySize: ", p), err) }
  return err
}

func (p *Employee) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Employee(%+v)", *p)
}

// Attributes:
//  - EmployeeFullName
//  - TotalIncome
//  - TotalDiscounts
//  - TotalBenefits
type Paycheck struct {
  EmployeeFullName string `thrift:"EmployeeFullName,1,required" db:"EmployeeFullName" json:"EmployeeFullName"`
  TotalIncome float64 `thrift:"TotalIncome,2,required" db:"TotalIncome" json:"TotalIncome"`
  TotalDiscounts float64 `thrift:"TotalDiscounts,3,required" db:"TotalDiscounts" json:"TotalDiscounts"`
  TotalBenefits float64 `thrift:"TotalBenefits,4,required" db:"TotalBenefits" json:"TotalBenefits"`
}

func NewPaycheck() *Paycheck {
  return &Paycheck{}
}


func (p *Paycheck) GetEmployeeFullName() string {
  return p.EmployeeFullName
}

func (p *Paycheck) GetTotalIncome() float64 {
  return p.TotalIncome
}

func (p *Paycheck) GetTotalDiscounts() float64 {
  return p.TotalDiscounts
}

func (p *Paycheck) GetTotalBenefits() float64 {
  return p.TotalBenefits
}
func (p *Paycheck) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetEmployeeFullName bool = false;
  var issetTotalIncome bool = false;
  var issetTotalDiscounts bool = false;
  var issetTotalBenefits bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
        issetEmployeeFullName = true
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.DOUBLE {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
        issetTotalIncome = true
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.DOUBLE {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
        issetTotalDiscounts = true
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.DOUBLE {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
        issetTotalBenefits = true
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetEmployeeFullName{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field EmployeeFullName is not set"));
  }
  if !issetTotalIncome{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field TotalIncome is not set"));
  }
  if !issetTotalDiscounts{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field TotalDiscounts is not set"));
  }
  if !issetTotalBenefits{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field TotalBenefits is not set"));
  }
  return nil
}

func (p *Paycheck)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.EmployeeFullName = v
}
  return nil
}

func (p *Paycheck)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.TotalIncome = v
}
  return nil
}

func (p *Paycheck)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.TotalDiscounts = v
}
  return nil
}

func (p *Paycheck)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.TotalBenefits = v
}
  return nil
}

func (p *Paycheck) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("Paycheck"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Paycheck) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("EmployeeFullName", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:EmployeeFullName: ", p), err) }
  if err := oprot.WriteString(string(p.EmployeeFullName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.EmployeeFullName (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:EmployeeFullName: ", p), err) }
  return err
}

func (p *Paycheck) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("TotalIncome", thrift.DOUBLE, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:TotalIncome: ", p), err) }
  if err := oprot.WriteDouble(float64(p.TotalIncome)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.TotalIncome (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:TotalIncome: ", p), err) }
  return err
}

func (p *Paycheck) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("TotalDiscounts", thrift.DOUBLE, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:TotalDiscounts: ", p), err) }
  if err := oprot.WriteDouble(float64(p.TotalDiscounts)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.TotalDiscounts (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:TotalDiscounts: ", p), err) }
  return err
}

func (p *Paycheck) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("TotalBenefits", thrift.DOUBLE, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:TotalBenefits: ", p), err) }
  if err := oprot.WriteDouble(float64(p.TotalBenefits)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.TotalBenefits (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:TotalBenefits: ", p), err) }
  return err
}

func (p *Paycheck) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Paycheck(%+v)", *p)
}

type Employer interface {
  // Parameters:
  //  - Employee
  CalculatePaycheck(ctx context.Context, employee *Employee) (r *Paycheck, err error)
  // Parameters:
  //  - Employee
  CalculateTotalDiscountsForEmployee(ctx context.Context, employee *Employee) (r string, err error)
  // Parameters:
  //  - Employee
  CalculateTotalBenefitsForEmployee(ctx context.Context, employee *Employee) (r string, err error)
  // Parameters:
  //  - Employee
  ReceivesPositionBenefit(ctx context.Context, employee *Employee) (r string, err error)
}

type EmployerClient struct {
  c thrift.TClient
}

func NewEmployerClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *EmployerClient {
  return &EmployerClient{
    c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
  }
}

func NewEmployerClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *EmployerClient {
  return &EmployerClient{
    c: thrift.NewTStandardClient(iprot, oprot),
  }
}

func NewEmployerClient(c thrift.TClient) *EmployerClient {
  return &EmployerClient{
    c: c,
  }
}

func (p *EmployerClient) Client_() thrift.TClient {
  return p.c
}
// Parameters:
//  - Employee
func (p *EmployerClient) CalculatePaycheck(ctx context.Context, employee *Employee) (r *Paycheck, err error) {
  var _args0 EmployerCalculatePaycheckArgs
  _args0.Employee = employee
  var _result1 EmployerCalculatePaycheckResult
  if err = p.Client_().Call(ctx, "CalculatePaycheck", &_args0, &_result1); err != nil {
    return
  }
  return _result1.GetSuccess(), nil
}

// Parameters:
//  - Employee
func (p *EmployerClient) CalculateTotalDiscountsForEmployee(ctx context.Context, employee *Employee) (r string, err error) {
  var _args2 EmployerCalculateTotalDiscountsForEmployeeArgs
  _args2.Employee = employee
  var _result3 EmployerCalculateTotalDiscountsForEmployeeResult
  if err = p.Client_().Call(ctx, "CalculateTotalDiscountsForEmployee", &_args2, &_result3); err != nil {
    return
  }
  return _result3.GetSuccess(), nil
}

// Parameters:
//  - Employee
func (p *EmployerClient) CalculateTotalBenefitsForEmployee(ctx context.Context, employee *Employee) (r string, err error) {
  var _args4 EmployerCalculateTotalBenefitsForEmployeeArgs
  _args4.Employee = employee
  var _result5 EmployerCalculateTotalBenefitsForEmployeeResult
  if err = p.Client_().Call(ctx, "CalculateTotalBenefitsForEmployee", &_args4, &_result5); err != nil {
    return
  }
  return _result5.GetSuccess(), nil
}

// Parameters:
//  - Employee
func (p *EmployerClient) ReceivesPositionBenefit(ctx context.Context, employee *Employee) (r string, err error) {
  var _args6 EmployerReceivesPositionBenefitArgs
  _args6.Employee = employee
  var _result7 EmployerReceivesPositionBenefitResult
  if err = p.Client_().Call(ctx, "ReceivesPositionBenefit", &_args6, &_result7); err != nil {
    return
  }
  return _result7.GetSuccess(), nil
}

type EmployerProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler Employer
}

func (p *EmployerProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *EmployerProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *EmployerProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewEmployerProcessor(handler Employer) *EmployerProcessor {

  self8 := &EmployerProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self8.processorMap["CalculatePaycheck"] = &employerProcessorCalculatePaycheck{handler:handler}
  self8.processorMap["CalculateTotalDiscountsForEmployee"] = &employerProcessorCalculateTotalDiscountsForEmployee{handler:handler}
  self8.processorMap["CalculateTotalBenefitsForEmployee"] = &employerProcessorCalculateTotalBenefitsForEmployee{handler:handler}
  self8.processorMap["ReceivesPositionBenefit"] = &employerProcessorReceivesPositionBenefit{handler:handler}
return self8
}

func (p *EmployerProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err := iprot.ReadMessageBegin()
  if err != nil { return false, err }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(ctx, seqId, iprot, oprot)
  }
  iprot.Skip(thrift.STRUCT)
  iprot.ReadMessageEnd()
  x9 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
  x9.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Flush(ctx)
  return false, x9

}

type employerProcessorCalculatePaycheck struct {
  handler Employer
}

func (p *employerProcessorCalculatePaycheck) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := EmployerCalculatePaycheckArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("CalculatePaycheck", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := EmployerCalculatePaycheckResult{}
var retval *Paycheck
  var err2 error
  if retval, err2 = p.handler.CalculatePaycheck(ctx, args.Employee); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing CalculatePaycheck: " + err2.Error())
    oprot.WriteMessageBegin("CalculatePaycheck", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("CalculatePaycheck", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type employerProcessorCalculateTotalDiscountsForEmployee struct {
  handler Employer
}

func (p *employerProcessorCalculateTotalDiscountsForEmployee) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := EmployerCalculateTotalDiscountsForEmployeeArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("CalculateTotalDiscountsForEmployee", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := EmployerCalculateTotalDiscountsForEmployeeResult{}
var retval string
  var err2 error
  if retval, err2 = p.handler.CalculateTotalDiscountsForEmployee(ctx, args.Employee); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing CalculateTotalDiscountsForEmployee: " + err2.Error())
    oprot.WriteMessageBegin("CalculateTotalDiscountsForEmployee", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("CalculateTotalDiscountsForEmployee", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type employerProcessorCalculateTotalBenefitsForEmployee struct {
  handler Employer
}

func (p *employerProcessorCalculateTotalBenefitsForEmployee) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := EmployerCalculateTotalBenefitsForEmployeeArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("CalculateTotalBenefitsForEmployee", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := EmployerCalculateTotalBenefitsForEmployeeResult{}
var retval string
  var err2 error
  if retval, err2 = p.handler.CalculateTotalBenefitsForEmployee(ctx, args.Employee); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing CalculateTotalBenefitsForEmployee: " + err2.Error())
    oprot.WriteMessageBegin("CalculateTotalBenefitsForEmployee", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("CalculateTotalBenefitsForEmployee", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type employerProcessorReceivesPositionBenefit struct {
  handler Employer
}

func (p *employerProcessorReceivesPositionBenefit) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := EmployerReceivesPositionBenefitArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("ReceivesPositionBenefit", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := EmployerReceivesPositionBenefitResult{}
var retval string
  var err2 error
  if retval, err2 = p.handler.ReceivesPositionBenefit(ctx, args.Employee); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ReceivesPositionBenefit: " + err2.Error())
    oprot.WriteMessageBegin("ReceivesPositionBenefit", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("ReceivesPositionBenefit", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - Employee
type EmployerCalculatePaycheckArgs struct {
  Employee *Employee `thrift:"employee,1" db:"employee" json:"employee"`
}

func NewEmployerCalculatePaycheckArgs() *EmployerCalculatePaycheckArgs {
  return &EmployerCalculatePaycheckArgs{}
}

var EmployerCalculatePaycheckArgs_Employee_DEFAULT *Employee
func (p *EmployerCalculatePaycheckArgs) GetEmployee() *Employee {
  if !p.IsSetEmployee() {
    return EmployerCalculatePaycheckArgs_Employee_DEFAULT
  }
return p.Employee
}
func (p *EmployerCalculatePaycheckArgs) IsSetEmployee() bool {
  return p.Employee != nil
}

func (p *EmployerCalculatePaycheckArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *EmployerCalculatePaycheckArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Employee = &Employee{}
  if err := p.Employee.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Employee), err)
  }
  return nil
}

func (p *EmployerCalculatePaycheckArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("CalculatePaycheck_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *EmployerCalculatePaycheckArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("employee", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:employee: ", p), err) }
  if err := p.Employee.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Employee), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:employee: ", p), err) }
  return err
}

func (p *EmployerCalculatePaycheckArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("EmployerCalculatePaycheckArgs(%+v)", *p)
}

// Attributes:
//  - Success
type EmployerCalculatePaycheckResult struct {
  Success *Paycheck `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewEmployerCalculatePaycheckResult() *EmployerCalculatePaycheckResult {
  return &EmployerCalculatePaycheckResult{}
}

var EmployerCalculatePaycheckResult_Success_DEFAULT *Paycheck
func (p *EmployerCalculatePaycheckResult) GetSuccess() *Paycheck {
  if !p.IsSetSuccess() {
    return EmployerCalculatePaycheckResult_Success_DEFAULT
  }
return p.Success
}
func (p *EmployerCalculatePaycheckResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *EmployerCalculatePaycheckResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *EmployerCalculatePaycheckResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &Paycheck{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *EmployerCalculatePaycheckResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("CalculatePaycheck_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *EmployerCalculatePaycheckResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *EmployerCalculatePaycheckResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("EmployerCalculatePaycheckResult(%+v)", *p)
}

// Attributes:
//  - Employee
type EmployerCalculateTotalDiscountsForEmployeeArgs struct {
  Employee *Employee `thrift:"employee,1" db:"employee" json:"employee"`
}

func NewEmployerCalculateTotalDiscountsForEmployeeArgs() *EmployerCalculateTotalDiscountsForEmployeeArgs {
  return &EmployerCalculateTotalDiscountsForEmployeeArgs{}
}

var EmployerCalculateTotalDiscountsForEmployeeArgs_Employee_DEFAULT *Employee
func (p *EmployerCalculateTotalDiscountsForEmployeeArgs) GetEmployee() *Employee {
  if !p.IsSetEmployee() {
    return EmployerCalculateTotalDiscountsForEmployeeArgs_Employee_DEFAULT
  }
return p.Employee
}
func (p *EmployerCalculateTotalDiscountsForEmployeeArgs) IsSetEmployee() bool {
  return p.Employee != nil
}

func (p *EmployerCalculateTotalDiscountsForEmployeeArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *EmployerCalculateTotalDiscountsForEmployeeArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Employee = &Employee{}
  if err := p.Employee.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Employee), err)
  }
  return nil
}

func (p *EmployerCalculateTotalDiscountsForEmployeeArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("CalculateTotalDiscountsForEmployee_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *EmployerCalculateTotalDiscountsForEmployeeArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("employee", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:employee: ", p), err) }
  if err := p.Employee.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Employee), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:employee: ", p), err) }
  return err
}

func (p *EmployerCalculateTotalDiscountsForEmployeeArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("EmployerCalculateTotalDiscountsForEmployeeArgs(%+v)", *p)
}

// Attributes:
//  - Success
type EmployerCalculateTotalDiscountsForEmployeeResult struct {
  Success *string `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewEmployerCalculateTotalDiscountsForEmployeeResult() *EmployerCalculateTotalDiscountsForEmployeeResult {
  return &EmployerCalculateTotalDiscountsForEmployeeResult{}
}

var EmployerCalculateTotalDiscountsForEmployeeResult_Success_DEFAULT string
func (p *EmployerCalculateTotalDiscountsForEmployeeResult) GetSuccess() string {
  if !p.IsSetSuccess() {
    return EmployerCalculateTotalDiscountsForEmployeeResult_Success_DEFAULT
  }
return *p.Success
}
func (p *EmployerCalculateTotalDiscountsForEmployeeResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *EmployerCalculateTotalDiscountsForEmployeeResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *EmployerCalculateTotalDiscountsForEmployeeResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *EmployerCalculateTotalDiscountsForEmployeeResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("CalculateTotalDiscountsForEmployee_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *EmployerCalculateTotalDiscountsForEmployeeResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteString(string(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *EmployerCalculateTotalDiscountsForEmployeeResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("EmployerCalculateTotalDiscountsForEmployeeResult(%+v)", *p)
}

// Attributes:
//  - Employee
type EmployerCalculateTotalBenefitsForEmployeeArgs struct {
  Employee *Employee `thrift:"employee,1" db:"employee" json:"employee"`
}

func NewEmployerCalculateTotalBenefitsForEmployeeArgs() *EmployerCalculateTotalBenefitsForEmployeeArgs {
  return &EmployerCalculateTotalBenefitsForEmployeeArgs{}
}

var EmployerCalculateTotalBenefitsForEmployeeArgs_Employee_DEFAULT *Employee
func (p *EmployerCalculateTotalBenefitsForEmployeeArgs) GetEmployee() *Employee {
  if !p.IsSetEmployee() {
    return EmployerCalculateTotalBenefitsForEmployeeArgs_Employee_DEFAULT
  }
return p.Employee
}
func (p *EmployerCalculateTotalBenefitsForEmployeeArgs) IsSetEmployee() bool {
  return p.Employee != nil
}

func (p *EmployerCalculateTotalBenefitsForEmployeeArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *EmployerCalculateTotalBenefitsForEmployeeArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Employee = &Employee{}
  if err := p.Employee.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Employee), err)
  }
  return nil
}

func (p *EmployerCalculateTotalBenefitsForEmployeeArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("CalculateTotalBenefitsForEmployee_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *EmployerCalculateTotalBenefitsForEmployeeArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("employee", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:employee: ", p), err) }
  if err := p.Employee.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Employee), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:employee: ", p), err) }
  return err
}

func (p *EmployerCalculateTotalBenefitsForEmployeeArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("EmployerCalculateTotalBenefitsForEmployeeArgs(%+v)", *p)
}

// Attributes:
//  - Success
type EmployerCalculateTotalBenefitsForEmployeeResult struct {
  Success *string `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewEmployerCalculateTotalBenefitsForEmployeeResult() *EmployerCalculateTotalBenefitsForEmployeeResult {
  return &EmployerCalculateTotalBenefitsForEmployeeResult{}
}

var EmployerCalculateTotalBenefitsForEmployeeResult_Success_DEFAULT string
func (p *EmployerCalculateTotalBenefitsForEmployeeResult) GetSuccess() string {
  if !p.IsSetSuccess() {
    return EmployerCalculateTotalBenefitsForEmployeeResult_Success_DEFAULT
  }
return *p.Success
}
func (p *EmployerCalculateTotalBenefitsForEmployeeResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *EmployerCalculateTotalBenefitsForEmployeeResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *EmployerCalculateTotalBenefitsForEmployeeResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *EmployerCalculateTotalBenefitsForEmployeeResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("CalculateTotalBenefitsForEmployee_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *EmployerCalculateTotalBenefitsForEmployeeResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteString(string(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *EmployerCalculateTotalBenefitsForEmployeeResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("EmployerCalculateTotalBenefitsForEmployeeResult(%+v)", *p)
}

// Attributes:
//  - Employee
type EmployerReceivesPositionBenefitArgs struct {
  Employee *Employee `thrift:"employee,1" db:"employee" json:"employee"`
}

func NewEmployerReceivesPositionBenefitArgs() *EmployerReceivesPositionBenefitArgs {
  return &EmployerReceivesPositionBenefitArgs{}
}

var EmployerReceivesPositionBenefitArgs_Employee_DEFAULT *Employee
func (p *EmployerReceivesPositionBenefitArgs) GetEmployee() *Employee {
  if !p.IsSetEmployee() {
    return EmployerReceivesPositionBenefitArgs_Employee_DEFAULT
  }
return p.Employee
}
func (p *EmployerReceivesPositionBenefitArgs) IsSetEmployee() bool {
  return p.Employee != nil
}

func (p *EmployerReceivesPositionBenefitArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *EmployerReceivesPositionBenefitArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Employee = &Employee{}
  if err := p.Employee.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Employee), err)
  }
  return nil
}

func (p *EmployerReceivesPositionBenefitArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ReceivesPositionBenefit_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *EmployerReceivesPositionBenefitArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("employee", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:employee: ", p), err) }
  if err := p.Employee.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Employee), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:employee: ", p), err) }
  return err
}

func (p *EmployerReceivesPositionBenefitArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("EmployerReceivesPositionBenefitArgs(%+v)", *p)
}

// Attributes:
//  - Success
type EmployerReceivesPositionBenefitResult struct {
  Success *string `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewEmployerReceivesPositionBenefitResult() *EmployerReceivesPositionBenefitResult {
  return &EmployerReceivesPositionBenefitResult{}
}

var EmployerReceivesPositionBenefitResult_Success_DEFAULT string
func (p *EmployerReceivesPositionBenefitResult) GetSuccess() string {
  if !p.IsSetSuccess() {
    return EmployerReceivesPositionBenefitResult_Success_DEFAULT
  }
return *p.Success
}
func (p *EmployerReceivesPositionBenefitResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *EmployerReceivesPositionBenefitResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *EmployerReceivesPositionBenefitResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *EmployerReceivesPositionBenefitResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ReceivesPositionBenefit_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *EmployerReceivesPositionBenefitResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteString(string(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *EmployerReceivesPositionBenefitResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("EmployerReceivesPositionBenefitResult(%+v)", *p)
}


